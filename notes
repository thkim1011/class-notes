#!/bin/python3
"""
My notes generation system! The idea is that when the semester
starts, I call `notes init` in whatever directory I'm using
for the class e.g. math202a or cs270. This will prompt me for
when the class meets (e.g. TTh, MW, MWT, etc), the first day
of class, and last day of class. This is sufficient for generating
on `lecxx.tex` file for each lecture and the directory structure 
somewhat as described in the init() function.

Some other ideas I have for this is for it to sync with my 
google drive, and my personal website which runs on flask.
The idea is that calling `notes upload` will upload each file
to my google drive and also create a json file which maps
each file `lecxx` to the link to the google drive. Having this
json file allows me to easily create a <ul> within my 
jinja-based website. 

Most of these docstrings are very rough ideas of how the project 
should be, so that I have a better idea of what I'm doing 
before I program this. 
"""

import sys
import os
import re
import json
from collections import OrderedDict
from googleapiclient.discovery import build, MediaFileUpload
from httplib2 import Http
from oauth2client import file, client, tools

VERSION = 0.1
SCOPES = 'https://www.googleapis.com/auth/drive.file'

def get_drive():
    store = file.Storage('.notes/token.json')
    creds = store.get()
    if not creds or creds.invalid:
        flow = client.flow_from_clientsecrets('/home/thkim1011/Workspace/class-notes/credentials.json', SCOPES)
        creds = tools.run_flow(flow, store)
    return build('drive', 'v3', http=creds.authorize(Http()))

def init():
    """
    Initializes a new set of notes for a class.
    The directory structure which is currently planned
    is the following:
    |-notes
        |-lec01.tex
        |-lec02.tex
        |-...
        |-lec32.tex (e.g.)
    |-outputs
        |-lec01.pdf
        |-lec02.pdf
        |-notes.pdf
    |-.notes
        |-lectures.json
        |-0.tex
        |-1.tex
        |-...
        |-notes.tex
    The .notes folder contains a JSON file which keeps a list of 
    each of the dates. Each of the x.tex file within `.notes`
    has a structure roughly 

        \setcounter to lecture number
        \section{DATE} 
        \input{../notes/lecx.tex}`.

    The reason for this is to make it easy to modify the DATE. The 
    file notes.tex should simply coalesce all of these somehow. 

    Should be called when `python3 notes.py init` or `notes init` 
    is run.
    """
    if os.path.exists("./.notes"):
        print("Notes already exist in this project!")
        return
    os.mkdir('.notes')

    drive = get_drive()
    # Create notes directory in google drive
    metadata = {
        'name': os.path.basename(os.getcwd()),
        'mimeType': 'application/vnd.google-apps.folder'
    }
    print(metadata['name'])
    parent = drive.files().create(body=metadata, fields='id').execute()
    print(parent)
    print('Folder ID {0}'.format(parent.get('id')))
    with open(".notes/PARENT", 'w') as parent_id_file:
        parent_id_file.write(parent.get('id'))

    # Create basic directories (notes, outputs)
    if not os.path.exists("./notes"):
        os.mkdir("notes")
    if not os.path.exists("./outputs"):
        os.mkdir("outputs")


def make():
    """
    Makes all outputs. 
    TODO: Add more description.
    """
    # First process the main notes.tex file in notes/ to get format.
    with open("notes/notes.tex", 'r') as template_file:
        template = template_file.read()

    # Partition the file into whatever comes before and after
    # begin{document} and end{document}
    prefix, middle, suffix =\
            re.split("\\\\begin\{document\}|\\\\end\{document\}", 
                    template)

    # For each "lecture" in ./notes, create a wrapping tex file and
    # place it in ./.notes and compile it
    os.chdir(".notes")
    for filename in os.listdir("../notes"):
        if re.match("lec[0-9]*.tex", filename):
            number = int(filename[3:-4])
            content = prefix + "\\begin{document}\n"\
                    + "\\setcounter{{section}}{{{0}}}".format(number - 1)\
                    + "\\input{{../notes/{0}}}\n".format(filename)\
                    + "\\end{document}\n"
            # Create the file
            with open(filename, 'w') as output_file:
                output_file.write(content)
            # Compile with a call to pdflatex
            os.system("pdflatex -output-directory ../outputs " + filename)


def upload():
    """
    Uploads the compiled notes to google drive. Requires
    Drive Python3 API. 
    """
    if not os.path.exists("./.notes"):
        print("Notes repo not yet initialized!")
    
    # Get google drive resource
    drive = get_drive()

    # Get parent folder from initialization
    with open(".notes/PARENT", "r") as parent_id_file:
        parent_id = parent_id_file.read()

    links_file = open("links.json", "w")
    links = {}
    # For each pdf, upload it and get link!
    for filename in os.listdir("outputs"):
        if re.match(".*.pdf", filename):
            metadata = {'name': filename,
                    'parents': [parent_id]}
            media = MediaFileUpload("outputs/" + filename,
                    mimetype="application/pdf",
                    resumable=True)
            file_id = drive.files().create(body=metadata,
                    media_body=media,
                    fields="id").execute()
            drive.permissions().create(fileId=file_id['id'],
                    body={
                        'type': 'anyone',
                        'role': 'reader',
                        'withLink': 'true'
                    }, fields="id").execute()
            link = drive.files().get(fileId=file_id['id'],
                    fields="webViewLink").execute()
            links[filename] = link["webViewLink"]
            print("Uploaded", filename)

    # Dump the links into json file.
    links_file.write(json.dumps(links))
    links_file.close()



def help():
    """
    Prints out the help text. 
    """
    version()
    print("USAGE: python3 notes.py [COMMAND]")
    print("COMMAND:")
    help_dict = {
        "help": "Prints out the help text.",
        "version": "Prints out the version.",
        "init": "Initializes a new set of notes.",
        "modify": "Modify the current set of notes.",
    }
    help_dict = OrderedDict(sorted(help_dict.items()))
    for entry in help_dict:
        print(("  " + entry).ljust(10), help_dict[entry])

def version():
    print("class-notes v{0}".format(VERSION))

def main():
    """
    Main function for the module. The module has three
    primary functions.
    """

    # If wrong number of arguments 
    if len(sys.argv) == 1 or len(sys.argv) > 2:
        help()
        return
       
    # Otherwise pop out the command
    command = sys.argv.pop()

    # Test for which command
    if command == "version":
        version()
    elif command == "help":
        help()
    elif command == "init":
        init()
    elif command == "make":
        make()
    elif command == "upload":
        upload()

if __name__ == "__main__":
    main()
